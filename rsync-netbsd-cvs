#! /bin/sh
#
#	rsync-netbsd-cvs - rsync the CVS repo from NetBSD
#
# also updates local working directories....
#
#ident "@(#)LOCAL:rsync-netbsd-cvs,v 1.17 2003/04/03 16:56:53 woods Exp"

PATH=$PATH:/usr/pkg/sbin:/usr/pkg/bin:/usr/local/sbin:/usr/local/bin
export PATH

#
#	local configuration
#

# WARNING: this pathname needs a trailing slash!
#
LOCAL_REPO="/cvs/master/m-NetBSD/"

# places to run "cvs update" after the rsync is done
#
WORK_DIRS="/work/NetBSD/othersrc /work/NetBSD/src /work/NetBSD/src-1.6 /work/NetBSD/xsrc /work/NetBSD/pkgsrc /most/var/httpd/htdocs-netbsd.robohack.ca"

# places to run "cvs -n update" after the rsync is done
#
#WORK_DIRS_CHECK="/work/woods/m-NetBSD-pkgsrc"

#
#	remote configuration
#

SITE="rsync.netbsd.org"
METHOD="rsync://"
DIRECTORY="/anoncvs"
EXTERNAL=""

# alternate site
#
#SITE="rsync.jp.netbsd.org"
#METHOD="rsync://"
#DIRECTORY="/anoncvs"
#EXTERNAL=""

# alternate site using rsh (hopefully over a private link! :-)
#
#SITE=""
#METHOD="woods@whome.planix.com:"
#DIRECTORY="/u5/NetBSD-CVS/"		# XXX not sure this is right any more
#EXTERNAL="-e rsh --blocking-io"

# WARNING:  this script could fail to interlock properly if it can be
# invoked simultaneously with more than one name!  Don't do that!
# 
LOCKDIR=/tmp/$(basename $0).lock

if [ -e $LOCKDIR ] ; then
	echo "It appears there's already an instance of $0 running..." 1>&2
	exit 1
fi

if mkdir $LOCKDIR ; then
	: #got it!
else
	echo "Oops, just missed grabbing $LOCKDIR!" 1>&2
	exit 1
fi

(
	while true; do
	        printf "START:%s: rsync\n" "$(date '+%Y/%m/%d-%T')"
		rsync -rlptgoD -vz ${EXTERNAL} --stats --delete --delete-after --exclude '#cvs.lock' ${METHOD}${SITE}${DIRECTORY} ${LOCAL_REPO}
		rc=$?
	        if [ $rc -eq 0 ]; then
	                break
		else
			echo ""
			printf "FAILED:%s: rsync exited with code: %d\n" "$(date '+%Y/%m/%d-%T')" $rc
	        fi
		# no newline in case someone's doing a 'tail -f'....
	        printf "PAUSE:%s: " "$(date '+%Y/%m/%d-%T')"
	        sleep 120
	        echo "RESTART"
	done
        printf "DONE:%s: rsync\n" "$(date '+%Y/%m/%d-%T')"
) > /var/log/rsync-netbsd-cvs 2>&1

# this produces the Cron report from the raw log by ignoring any line
# which ends in a '/' (presumably it's just one of the directories
# that was updated)
#
grep -v '/$' /var/log/rsync-netbsd-cvs
echo ""

for work_dir in $WORK_DIRS; do
	echo "================================================================"
        printf "\nSTART:%s: cvs update $work_dir\n\n" "$(date '+%Y/%m/%d-%T')"
	cd $work_dir && cvs -u -q update -P -d
        printf "\nDONE:%s: updating $work_dir\n\n" "$(date '+%Y/%m/%d-%T')"
	if [ -x /usr/pkg/bin/lintpkgsrc -a -f $work_dir/packages-to-upgrade -a $(basename $work_dir) = "pkgsrc" ] ; then
		/usr/pkg/bin/lintpkgsrc -P $work_dir -i | tee $work_dir/packages-to-upgrade.new
		if [ -s $work_dir/packages-to-upgrade.new ] ; then
			mv -f $work_dir/packages-to-upgrade.new  $work_dir/packages-to-upgrade
		fi
	fi
done

for work_dir in $WORK_DIRS_CHECK; do
        printf "\nSTART:%s: cvs -n update $work_dir\n\n" "$(date '+%Y/%m/%d-%T')"
	cd $work_dir && cvs -u -nq update -P -d 2>&1 | fgrep -v 'cvs update: New directory'
        printf "\nDONE:%s: checking $work_dir\n\n" "$(date '+%Y/%m/%d-%T')"
done

if [ ! -d $LOCKDIR ] ; then
	echo "OOPS!!!!  $LOCKDIR went missing!!!!" 1>&2
	exit 1
fi
rmdir $LOCKDIR

exit $?
